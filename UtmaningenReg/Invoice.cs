//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace UtmaningenReg
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Registreringar))]
    public partial class Invoice: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Box
        {
            get { return _box; }
            set
            {
                if (_box != value)
                {
                    _box = value;
                    OnPropertyChanged("Box");
                }
            }
        }
        private string _box;
    
        [DataMember]
        public string Postnummer
        {
            get { return _postnummer; }
            set
            {
                if (_postnummer != value)
                {
                    _postnummer = value;
                    OnPropertyChanged("Postnummer");
                }
            }
        }
        private string _postnummer;
    
        [DataMember]
        public string Organisationsnummer
        {
            get { return _organisationsnummer; }
            set
            {
                if (_organisationsnummer != value)
                {
                    _organisationsnummer = value;
                    OnPropertyChanged("Organisationsnummer");
                }
            }
        }
        private string _organisationsnummer;
    
        [DataMember]
        public string Postort
        {
            get { return _postort; }
            set
            {
                if (_postort != value)
                {
                    _postort = value;
                    OnPropertyChanged("Postort");
                }
            }
        }
        private string _postort;
    
        [DataMember]
        public string Postadress
        {
            get { return _postadress; }
            set
            {
                if (_postadress != value)
                {
                    _postadress = value;
                    OnPropertyChanged("Postadress");
                }
            }
        }
        private string _postadress;
    
        [DataMember]
        public string Namn
        {
            get { return _namn; }
            set
            {
                if (_namn != value)
                {
                    _namn = value;
                    OnPropertyChanged("Namn");
                }
            }
        }
        private string _namn;
    
        [DataMember]
        public string Att
        {
            get { return _att; }
            set
            {
                if (_att != value)
                {
                    _att = value;
                    OnPropertyChanged("Att");
                }
            }
        }
        private string _att;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Registreringar Registreringar
        {
            get { return _registreringar; }
            set
            {
                if (!ReferenceEquals(_registreringar, value))
                {
                    var previousValue = _registreringar;
                    _registreringar = value;
                    FixupRegistreringar(previousValue);
                    OnNavigationPropertyChanged("Registreringar");
                }
            }
        }
        private Registreringar _registreringar;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Registreringar = null;
            FixupRegistreringarKeys();
        }

        #endregion

        #region Association Fixup
    
        private void FixupRegistreringar(Registreringar previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Invoice, this))
            {
                previousValue.Invoice = null;
            }
    
            if (Registreringar != null)
            {
                Registreringar.Invoice = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Registreringar")
                    && (ChangeTracker.OriginalValues["Registreringar"] == Registreringar))
                {
                    ChangeTracker.OriginalValues.Remove("Registreringar");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Registreringar", previousValue);
                }
                if (Registreringar != null && !Registreringar.ChangeTracker.ChangeTrackingEnabled)
                {
                    Registreringar.StartTracking();
                }
                FixupRegistreringarKeys();
            }
        }
    
        private void FixupRegistreringarKeys()
        {
            const string IDKeyName = "Registreringar.ID";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IDKeyName))
            {
                if(Registreringar == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IDKeyName], Registreringar.ID))
                {
                    ChangeTracker.RecordOriginalValue(IDKeyName, ChangeTracker.ExtendedProperties[IDKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IDKeyName);
            }
        }

        #endregion

    }
}
