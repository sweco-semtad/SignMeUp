@model UtmaningenReg.Registreringar
@using UtmaningenReg
@using System.Collections.Specialized;

@{
    Layout = "~/Views/Shared/_SimpleLayout.cshtml";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(document).ready(function () {
        $('#bana select').change(function () {
            
//            if (window.self === window.top) {
//                $("form").validate().cancelSubmit = true;
//                $("form").submit();
//            }
//            else {
//                var myform = $("iframe #frm");
//                myform.cancelSubmit = true;
//                myform.submit();
//            }

            $("form").validate().cancelSubmit = true;
            this.form.submit();

        });
    });
</script>

@using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frm", id = "frm" }))
{
    if (TempData["ValidationError"] != null)
    {
        <p style="color: red;">Ett fel inträffade.<br /><br />
        Felmeddelande: @TempData["ValidationError"]</p>
    }

    if (TempData["Error"] != null)
    {
        <p style="color: red;">Ett fel inträffade när betalningen skulle genomföras. Administratör är kontaktad och vi åtgärdar problemet så snart som möjligt.<br /><br />
        Felmeddelande: @TempData["Error"]</p>
    }

    if (TempData["PaymentErrorMessage"] != null)
    {
        <p style="color: red;">
            Betalningen misslyckades. Felmeddelande: @TempData["PaymentErrorMessage"] och eventuell parameter är @TempData["PaymentErrorParameter"].
            Om felet återkommer, kontakta oss med hjälp av kontaktformuläret på sidan.
        </p>
    }
    
    <p>Ska du anmäla många lag ber vi dig skicka alla uppgifter till <a href="mailto:utmaningen@karlstadmultisport.se">utmaningen@karlstadmultisport.se</a></p>
    
    @Html.ValidationSummary(true)
        
        <div class="editor-label">
            @Html.LabelFor(model => model.Lagnamn)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Lagnamn)
            @Html.ValidationMessageFor(model => model.Lagnamn)
        </div>
    
        <div class="editor-label">
            @Html.LabelFor(model => model.Bana)
        </div>
        <div class="editor-field" id="bana">
            @Html.DropDownList("Bana", (IEnumerable<SelectListItem>)ViewData["Banor"], "Välj bana", new { @class = "cancel" })
            @Html.ValidationMessageFor(model => model.Bana)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Klass)
        </div>
        <div class="editor-field">
            @Html.DropDownList("Klass", (IEnumerable<SelectListItem>)ViewData["Klasser"], "Välj klass")
            @Html.ValidationMessageFor(model => model.Klass)
        </div>
    
        <div class="editor-label">Deltagare</div>
        <div id="deltagareWrapper">
            @Html.EditorFor(model => model.Deltagare)
        </div>
    
        <div class="ranking">
            <div class="editor-label">
                @Html.LabelFor(model => model.Ranking, "Samtycker du till att listas i den nationella rankinglistan?")
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Ranking)
                @Html.ValidationMessageFor(model => model.Ranking)
            </div>
            <div>
                <a href="http://www.multisportforbundet.se/" target="_blank">Mer information om ranking i multisportcupen.</a>
            </div>
        </div>
    
        <div class="editor-label">
            @Html.LabelFor(model => model.Kanot)
        </div>
        <div class="editor-field">
            @Html.DropDownList("Kanot", (IEnumerable<SelectListItem>)ViewData["Kanoter"], "Välj kanot")
            @Html.ValidationMessageFor(model => model.Kanot)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Klubb)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Klubb)
            @Html.ValidationMessageFor(model => model.Klubb)
        </div>  

        <div class="editor-label">
            @Html.LabelFor(model => model.Adress, "Postadress (gata gatunummer, postnummer, postort)")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Adress)
            @Html.ValidationMessageFor(model => model.Adress)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Telefon)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Telefon)
            @Html.ValidationMessageFor(model => model.Telefon)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Epost)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Epost)
            @Html.ValidationMessageFor(model => model.Epost)
        </div>

        <div class="editor-label">
            @Html.Label("", "Rabattkod")
        </div>
        <div class="editor-field">
            @Html.TextBox("rabattkod")
        </div>
    
    if (Request.IsAuthenticated)
    {
            <div class="editor-label">
                @Html.LabelFor(model => model.Kommentar, "Kommentar")
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Kommentar)
            </div>
    }

    if (((int)ViewData["Forseningsavgift"]) > 0)
    {
            <div class="editor-label">
                Avgift för sen anmälan
            </div>
            <div class="editor-field">
            
    @if (Request.IsAuthenticated)
                {
                    @Html.EditorFor(model => model.Forseningsavgift);
                }
                else
                {
                    @Html.DisplayTextFor(model => model.Forseningsavgift); @(" kr");
                }
            </div>
    }

    if (ViewContext.RouteData.GetRequiredString("action") == "Edit")
    {   
        <div class="editor-label">
            Fakturaadress
        </div>
        <div class="editor-field">
            @(Model.Invoice != null ? "Finns" : "Finns ej")
        </div>
        <div>
            @if (Model.Invoice == null)
            {
                @Html.ActionLink("Lägg till/redigera fakturaadress", "EditInvoice", new { id = 0 })
            }
            else
            {
                @Html.ActionLink("Lägg till/redigera fakturaadress", "EditInvoice", new { id = Model.Invoice.Id })
            }
            
        </div>
    }

    if (Request.IsAuthenticated)
    {
            <div class="editor-label">
                @Html.LabelFor(model => model.Startnummer)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Startnummer)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.Rabatt)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Rabatt)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.HarBetalt, "Har betalt")
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.HarBetalt)
            </div>
    }
        
        <p>
            <input type="submit" name="sendReg" value="Skicka anmälan" />
        </p>
    
}
