//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace UtmaningenReg
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Banor))]
    [KnownType(typeof(Kanoter))]
    [KnownType(typeof(Klasser))]
    [KnownType(typeof(Invoice))]
    [KnownType(typeof(Deltagare))]
    public partial class Registreringar: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string Adress
        {
            get { return _adress; }
            set
            {
                if (_adress != value)
                {
                    _adress = value;
                    OnPropertyChanged("Adress");
                }
            }
        }
        private string _adress;
    
        [DataMember]
        public string Telefon
        {
            get { return _telefon; }
            set
            {
                if (_telefon != value)
                {
                    _telefon = value;
                    OnPropertyChanged("Telefon");
                }
            }
        }
        private string _telefon;
    
        [DataMember]
        public string Epost
        {
            get { return _epost; }
            set
            {
                if (_epost != value)
                {
                    _epost = value;
                    OnPropertyChanged("Epost");
                }
            }
        }
        private string _epost;
    
        [DataMember]
        public bool Ranking
        {
            get { return _ranking; }
            set
            {
                if (_ranking != value)
                {
                    _ranking = value;
                    OnPropertyChanged("Ranking");
                }
            }
        }
        private bool _ranking;
    
        [DataMember]
        public int Startnummer
        {
            get { return _startnummer; }
            set
            {
                if (_startnummer != value)
                {
                    _startnummer = value;
                    OnPropertyChanged("Startnummer");
                }
            }
        }
        private int _startnummer;
    
        [DataMember]
        public string Lagnamn
        {
            get { return _lagnamn; }
            set
            {
                if (_lagnamn != value)
                {
                    _lagnamn = value;
                    OnPropertyChanged("Lagnamn");
                }
            }
        }
        private string _lagnamn;
    
        [DataMember]
        public int Kanot
        {
            get { return _kanot; }
            set
            {
                if (_kanot != value)
                {
                    ChangeTracker.RecordOriginalValue("Kanot", _kanot);
                    if (!IsDeserializing)
                    {
                        if (Kanoter != null && Kanoter.ID != value)
                        {
                            Kanoter = null;
                        }
                    }
                    _kanot = value;
                    OnPropertyChanged("Kanot");
                }
            }
        }
        private int _kanot;
    
        [DataMember]
        public string Klubb
        {
            get { return _klubb; }
            set
            {
                if (_klubb != value)
                {
                    _klubb = value;
                    OnPropertyChanged("Klubb");
                }
            }
        }
        private string _klubb;
    
        [DataMember]
        public int Klass
        {
            get { return _klass; }
            set
            {
                if (_klass != value)
                {
                    ChangeTracker.RecordOriginalValue("Klass", _klass);
                    if (!IsDeserializing)
                    {
                        if (Klasser != null && Klasser.ID != value)
                        {
                            Klasser = null;
                        }
                    }
                    _klass = value;
                    OnPropertyChanged("Klass");
                }
            }
        }
        private int _klass;
    
        [DataMember]
        public bool HarBetalt
        {
            get { return _harBetalt; }
            set
            {
                if (_harBetalt != value)
                {
                    _harBetalt = value;
                    OnPropertyChanged("HarBetalt");
                }
            }
        }
        private bool _harBetalt;
    
        [DataMember]
        public int Forseningsavgift
        {
            get { return _forseningsavgift; }
            set
            {
                if (_forseningsavgift != value)
                {
                    _forseningsavgift = value;
                    OnPropertyChanged("Forseningsavgift");
                }
            }
        }
        private int _forseningsavgift;
    
        [DataMember]
        public System.DateTime Registreringstid
        {
            get { return _registreringstid; }
            set
            {
                if (_registreringstid != value)
                {
                    _registreringstid = value;
                    OnPropertyChanged("Registreringstid");
                }
            }
        }
        private System.DateTime _registreringstid;
    
        [DataMember]
        public string Kommentar
        {
            get { return _kommentar; }
            set
            {
                if (_kommentar != value)
                {
                    _kommentar = value;
                    OnPropertyChanged("Kommentar");
                }
            }
        }
        private string _kommentar;
    
        [DataMember]
        public int Bana
        {
            get { return _bana; }
            set
            {
                if (_bana != value)
                {
                    ChangeTracker.RecordOriginalValue("Bana", _bana);
                    if (!IsDeserializing)
                    {
                        if (Banor != null && Banor.ID != value)
                        {
                            Banor = null;
                        }
                    }
                    _bana = value;
                    OnPropertyChanged("Bana");
                }
            }
        }
        private int _bana;
    
        [DataMember]
        public int Rabatt
        {
            get { return _rabatt; }
            set
            {
                if (_rabatt != value)
                {
                    _rabatt = value;
                    OnPropertyChanged("Rabatt");
                }
            }
        }
        private int _rabatt;
    
        [DataMember]
        public string PaysonToken
        {
            get { return _paysonToken; }
            set
            {
                if (_paysonToken != value)
                {
                    _paysonToken = value;
                    OnPropertyChanged("PaysonToken");
                }
            }
        }
        private string _paysonToken;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Banor Banor
        {
            get { return _banor; }
            set
            {
                if (!ReferenceEquals(_banor, value))
                {
                    var previousValue = _banor;
                    _banor = value;
                    FixupBanor(previousValue);
                    OnNavigationPropertyChanged("Banor");
                }
            }
        }
        private Banor _banor;
    
        [DataMember]
        public Kanoter Kanoter
        {
            get { return _kanoter; }
            set
            {
                if (!ReferenceEquals(_kanoter, value))
                {
                    var previousValue = _kanoter;
                    _kanoter = value;
                    FixupKanoter(previousValue);
                    OnNavigationPropertyChanged("Kanoter");
                }
            }
        }
        private Kanoter _kanoter;
    
        [DataMember]
        public Klasser Klasser
        {
            get { return _klasser; }
            set
            {
                if (!ReferenceEquals(_klasser, value))
                {
                    var previousValue = _klasser;
                    _klasser = value;
                    FixupKlasser(previousValue);
                    OnNavigationPropertyChanged("Klasser");
                }
            }
        }
        private Klasser _klasser;
    
        [DataMember]
        public Invoice Invoice
        {
            get { return _invoice; }
            set
            {
                if (!ReferenceEquals(_invoice, value))
                {
                    var previousValue = _invoice;
                    _invoice = value;
                    FixupInvoice(previousValue);
                    OnNavigationPropertyChanged("Invoice");
                }
            }
        }
        private Invoice _invoice;
    
        [DataMember]
        public TrackableCollection<Deltagare> Deltagare
        {
            get
            {
                if (_deltagare == null)
                {
                    _deltagare = new TrackableCollection<Deltagare>();
                    _deltagare.CollectionChanged += FixupDeltagare;
                }
                return _deltagare;
            }
            set
            {
                if (!ReferenceEquals(_deltagare, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_deltagare != null)
                    {
                        _deltagare.CollectionChanged -= FixupDeltagare;
                    }
                    _deltagare = value;
                    if (_deltagare != null)
                    {
                        _deltagare.CollectionChanged += FixupDeltagare;
                    }
                    OnNavigationPropertyChanged("Deltagare");
                }
            }
        }
        private TrackableCollection<Deltagare> _deltagare;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Banor = null;
            Kanoter = null;
            Klasser = null;
            Invoice = null;
            Deltagare.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupBanor(Banor previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Registreringar.Contains(this))
            {
                previousValue.Registreringar.Remove(this);
            }
    
            if (Banor != null)
            {
                if (!Banor.Registreringar.Contains(this))
                {
                    Banor.Registreringar.Add(this);
                }
    
                Bana = Banor.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Banor")
                    && (ChangeTracker.OriginalValues["Banor"] == Banor))
                {
                    ChangeTracker.OriginalValues.Remove("Banor");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Banor", previousValue);
                }
                if (Banor != null && !Banor.ChangeTracker.ChangeTrackingEnabled)
                {
                    Banor.StartTracking();
                }
            }
        }
    
        private void FixupKanoter(Kanoter previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Registreringar.Contains(this))
            {
                previousValue.Registreringar.Remove(this);
            }
    
            if (Kanoter != null)
            {
                if (!Kanoter.Registreringar.Contains(this))
                {
                    Kanoter.Registreringar.Add(this);
                }
    
                Kanot = Kanoter.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Kanoter")
                    && (ChangeTracker.OriginalValues["Kanoter"] == Kanoter))
                {
                    ChangeTracker.OriginalValues.Remove("Kanoter");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Kanoter", previousValue);
                }
                if (Kanoter != null && !Kanoter.ChangeTracker.ChangeTrackingEnabled)
                {
                    Kanoter.StartTracking();
                }
            }
        }
    
        private void FixupKlasser(Klasser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Registreringar.Contains(this))
            {
                previousValue.Registreringar.Remove(this);
            }
    
            if (Klasser != null)
            {
                if (!Klasser.Registreringar.Contains(this))
                {
                    Klasser.Registreringar.Add(this);
                }
    
                Klass = Klasser.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Klasser")
                    && (ChangeTracker.OriginalValues["Klasser"] == Klasser))
                {
                    ChangeTracker.OriginalValues.Remove("Klasser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Klasser", previousValue);
                }
                if (Klasser != null && !Klasser.ChangeTracker.ChangeTrackingEnabled)
                {
                    Klasser.StartTracking();
                }
            }
        }
    
        private void FixupInvoice(Invoice previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (Invoice != null)
            {
                ChangeTracker.ObjectStateChanging += Invoice.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Registreringar, this))
            {
                previousValue.Registreringar = null;
            }
    
            if (Invoice != null)
            {
                Invoice.Registreringar = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Invoice")
                    && (ChangeTracker.OriginalValues["Invoice"] == Invoice))
                {
                    ChangeTracker.OriginalValues.Remove("Invoice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Invoice", previousValue);
                }
                if (Invoice != null && !Invoice.ChangeTracker.ChangeTrackingEnabled)
                {
                    Invoice.StartTracking();
                }
            }
        }
    
        private void FixupDeltagare(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Deltagare item in e.NewItems)
                {
                    item.RegistreringarID = ID;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Deltagare", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Deltagare item in e.OldItems)
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Deltagare", item);
                    }
                }
            }
        }

        #endregion
    }
}
